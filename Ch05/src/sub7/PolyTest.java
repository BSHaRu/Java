package sub7;

/*
 *  날짜 : 2023.06.22
 *  내용 : Java 다형성 실습
 *  
 *  다형성(Polymorphism)
 * 	- 상속관계에서 부모 클래스의 기능이 자식 클래스에서 다양한 기능으로 변하는 특성
 * 	- 객체의 타입선언을 부모 클래스 타입으로 선언
 * 	- 다형성을 활용해서 프로그래밍의 중복을 줄이고 유연성을 높임
 */

public class PolyTest {
	public static void main(String[] args) {
		
		// 다형성을 적용한 객체 생성(업캐스팅)
		Animal a1 = new Tiger();
		Animal a2 = new Eagle();
		Animal a3 = new Shark();
		
		a1.move();
		a1.hunt();
		
		System.out.println("---------------");
		
		a2.move();
		a2.hunt();
		
		System.out.println("---------------");
		
		a3.move();
		a3.hunt();
		
		System.out.println("----업캐스팅 끝-----");
		
		// 다운캐스팅
		Tiger tiger = (Tiger) a1;
		Eagle eagle = (Eagle) a2;
		Shark shark = (Shark) a3;
		
		tiger.move();
		tiger.hunt();
		
		System.out.println("---------------");
		
		eagle.move();
		eagle.hunt();
		
		System.out.println("---------------");
		
		shark.move();
		shark.hunt();
		
		System.out.println("----다운캐스팅 끝-----");
		
		// 객체 타입 비교연산
		// A instanceof B : A의 인스턴스가 B타입이랑 같은지 비교하는 친구
		if(a1 instanceof Tiger) {
			System.out.println("a1은 Tiger");
		}else if(a1 instanceof Eagle) {
			System.out.println("a1은 Eagle");
		}else if(a1 instanceof Shark) {
			System.out.println("a1은 Shark");
		}
		
		System.out.println("-----------------");
		
		// 다형성을 활용한 객체배열
		Animal arr[] = {tiger, eagle, shark};
		arr[0].move();
		arr[1].move();
		arr[2].move();
		
		
	}
}
